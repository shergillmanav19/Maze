{"version":3,"sources":["Maze.js","index.js"],"names":["Maze","state","grid","rowChanged","colChanged","start","handleMouseHover","bind","reset","newGrid","produce","this","copy","row","col","temp_r","setState","Array","fill","map","i","j","topMiddle","topRight","middleLeft","bottomLeft","middleRight","bottomMiddle","bottomRight","topLeft","event","valuesToChange","target","getAttribute","split","Number","findNeighbours","drawMaze","style","display","flexDirection","justifyContent","alignItems","fontSize","padding","marginTop","borderRadius","backgroundColor","onClick","gridTemplateColumns","rows","k","data-value","onMouseMove","width","height","border","undefined","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f872c945.chunk.js","sourcesContent":["import React from \"react\";\nimport produce from \"immer\";\nclass Maze extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      rowChanged: 0,\n      colChanged: 0,\n      start: 1,\n    };\n    this.handleMouseHover = this.handleMouseHover.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n  drawMaze() {\n    const newGrid = produce(this.state.grid, (copy) => {\n      let row = 2;\n      let col = 0;\n\n      while (row < 20) {\n        let temp_r = row;\n        col = 0;\n        for (row; row >= 0; row--) {\n          copy[row][col] = 1;\n          col += 1;\n        }\n        row = temp_r + 2;\n      }\n      row = 17;\n      while (row > 0) {\n        let temp_r = row;\n        col = 19;\n        for (row; row <= 19; row++) {\n          copy[row][col] = 1;\n          col -= 1;\n        }\n        row = temp_r - 2;\n      }\n      copy[19][18] = 1;\n    });\n\n    this.setState(() => {\n      return { grid: newGrid };\n    });\n  }\n  componentWillMount() {\n    this.setState(() => {\n      return {\n        grid: Array(20)\n          .fill(0)\n          .map(() => new Array(20).fill(0)),\n      };\n    });\n  }\n  findNeighbours(i, j) {\n    if (i === 19 && j === 0) {\n      let topMiddle = this.state.grid[i - 1][j];\n      let topRight = this.state.grid[i - 1][j + 1];\n      let middleRight = this.state.grid[i][j + 1];\n      if (middleRight === 2 || topMiddle === 2 || topRight === 2) {\n        return true;\n      }\n    } else if (i === 0 && j === 19) {\n      let middleLeft = this.state.grid[i][j - 1];\n      let bottomLeft = this.state.grid[i + 1][j - 1];\n      let bottomMiddle = this.state.grid[i + 1][j];\n      if (bottomMiddle === 2 || middleLeft === 2 || bottomLeft === 2) {\n        return true;\n      }\n    } else if (i === 0) {\n      let middleLeft = this.state.grid[i][j - 1];\n      let middleRight = this.state.grid[i][j + 1];\n      let bottomLeft = this.state.grid[i + 1][j - 1];\n      let bottomMiddle = this.state.grid[i + 1][j];\n      let bottomRight = this.state.grid[i + 1][j + 1];\n      if (\n        middleLeft === 2 ||\n        bottomLeft === 2 ||\n        bottomMiddle === 2 ||\n        bottomRight === 2 ||\n        middleRight === 2\n      ) {\n        return true;\n      }\n    } else if (i === 19) {\n      let topLeft = this.state.grid[i - 1][j - 1];\n      let topMiddle = this.state.grid[i - 1][j];\n      let topRight = this.state.grid[i - 1][j + 1];\n      let middleLeft = this.state.grid[i][j - 1];\n      let middleRight = this.state.grid[i][j + 1];\n      if (\n        middleLeft === 2 ||\n        topLeft === 2 ||\n        topMiddle === 2 ||\n        topRight === 2 ||\n        middleRight === 2\n      ) {\n        return true;\n      }\n    } else if (j === 0) {\n      let topMiddle = this.state.grid[i - 1][j];\n      let topRight = this.state.grid[i - 1][j + 1];\n      let middleRight = this.state.grid[i][j + 1];\n      let bottomMiddle = this.state.grid[i + 1][j];\n      let bottomRight = this.state.grid[i + 1][j + 1];\n      if (\n        topMiddle === 2 ||\n        topRight === 2 ||\n        middleRight === 2 ||\n        bottomRight === 2 ||\n        bottomMiddle === 2\n      ) {\n        return true;\n      }\n    } else if (j === 19) {\n      let topLeft = this.state.grid[i - 1][j - 1];\n      let topMiddle = this.state.grid[i - 1][j];\n      let middleLeft = this.state.grid[i][j - 1];\n      let bottomLeft = this.state.grid[i + 1][j - 1];\n      let bottomMiddle = this.state.grid[i + 1][j];\n      if (\n        topMiddle === 2 ||\n        topLeft === 2 ||\n        middleLeft === 2 ||\n        bottomLeft === 2 ||\n        bottomMiddle === 2\n      ) {\n        return true;\n      }\n    } else {\n      let topLeft = this.state.grid[i - 1][j - 1];\n      let topMiddle = this.state.grid[i - 1][j];\n      let topRight = this.state.grid[i - 1][j + 1];\n      let middleLeft = this.state.grid[i][j - 1];\n      let middleRight = this.state.grid[i][j + 1];\n      let bottomLeft = this.state.grid[i + 1][j - 1];\n      let bottomMiddle = this.state.grid[i + 1][j];\n      let bottomRight = this.state.grid[i + 1][j + 1];\n      if (\n        topLeft === 2 ||\n        topMiddle === 2 ||\n        topRight === 2 ||\n        middleLeft === 2 ||\n        middleRight === 2 ||\n        bottomLeft === 2 ||\n        bottomRight === 2 ||\n        bottomMiddle === 2\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  handleMouseHover(event) {\n    const value = event.target.getAttribute(\"data-value\");\n    const valuesToChange = value.split(\",\");\n    const row = Number(valuesToChange[0]);\n    const col = Number(valuesToChange[1]);\n    if (row === this.state.rowChanged && col === this.state.colChanged) {\n      return;\n    }\n    // eslint-disable-next-line\n    // if ((row == 0 && col == 0) || (row == 19 && col == 19)) {\n    //   return;\n    // }\n    const newGrid = produce(this.state.grid, (copy) => {\n      if (1) {\n        copy[0][1] = 2;\n      }\n      if (this.state.grid[row][col] === 1) {\n        //do nothing\n      } else {\n        //check if any neighbours are yellow\n        if (this.findNeighbours(row, col)) {\n          //if they are execute next line otherwise skip\n          // copy[row][col] = this.state.grid[row][col] ? 0 : 2;\n          copy[row][col] = 2;\n        }\n      }\n    });\n    this.setState(() => {\n      return { grid: newGrid, rowChanged: row, colChanged: col };\n    });\n  }\n  reset() {\n    this.setState(() => {\n      return {\n        grid: Array(20)\n          .fill(0)\n          .map(() => new Array(20).fill(0)),\n        start: 1,\n      };\n    });\n  }\n  render() {\n    let drawMaze;\n    if (this.state.start) {\n      drawMaze = this.drawMaze();\n      this.setState(() => {\n        return { start: 0 };\n      });\n    }\n    let gameOver = false;\n    if (this.state.grid[18][19] === 2) {\n      return (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <div style={{ fontSize: \"3rem\" }}>You completed the maze!</div>\n          <button\n            style={{\n              padding: \"10px\",\n              fontSize: \"2rem\",\n              marginTop: \"2rem\",\n              borderRadius: \"4px\",\n              backgroundColor: \"#cad7dd \",\n            }}\n            onClick={this.reset}\n          >\n            Play Again!\n          </button>\n        </div>\n      );\n    } else {\n      return (\n        <div\n          style={{\n            display: \"grid\",\n            gridTemplateColumns: `repeat(${20}, 35px)`,\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          {this.state.grid.map((rows, i) =>\n            rows.map((col, k) => {\n              if (k === 0 && i === 0) {\n                return (\n                  <div\n                    data-value={[i, k]}\n                    onMouseMove={this.handleMouseHover}\n                    style={{\n                      width: 35,\n                      height: 35,\n                      backgroundColor: \"green\",\n                      border: \"solid 1px black\",\n                    }}\n                  ></div>\n                );\n              } else if (k === 19 && i === 19) {\n                return (\n                  <div\n                    data-value={[i, k]}\n                    onMouseMove={this.handleMouseHover}\n                    style={{\n                      width: 35,\n                      height: 35,\n                      backgroundColor: \"red\",\n                      border: \"solid 1px black\",\n                    }}\n                  ></div>\n                );\n              } else if (k === 1 && i === 0) {\n                return (\n                  <div\n                    data-value={[i, k]}\n                    onMouseMove={this.handleMouseHover}\n                    style={{\n                      width: 35,\n                      height: 35,\n                      backgroundColor: \"yellow\",\n                      border: \"solid 1px black\",\n                    }}\n                  ></div>\n                );\n              } else {\n                return (\n                  <div\n                    data-value={[i, k]}\n                    onMouseMove={this.handleMouseHover}\n                    style={{\n                      width: 35,\n                      height: 35,\n                      backgroundColor:\n                        this.state.grid[i][k] < 2\n                          ? this.state.grid[i][k] === 1\n                            ? \"black\"\n                            : undefined\n                          : \"yellow\",\n                      border: \"solid 1px black\",\n                    }}\n                  ></div>\n                );\n              }\n            })\n          )}\n          {drawMaze}\n          {gameOver}\n        </div>\n      );\n    }\n  }\n}\nexport default Maze;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Maze from \"./Maze\";\n\nReactDOM.render(<Maze />, document.getElementById(\"root\"));\n"],"sourceRoot":""}